//Practical Dijkstra algorithm
#include<iostream>
#include<iomanip>
#include<cstdio>
#include<climits>
#define max_node 11
using namespace std;
class graph{
    public:
int edges;
int vertex;
int distance[max_node];
int path[max_node];
int adj[max_node][max_node];
void input(int e,int v){
edges=e;
vertex=v;
for(int i=0;i<v;i++){
for(int j=0;j<v;j++){
adj[i][j]=0;
}
}
int src,des,weight;
for(int i=0;i<e;i++){
cout<<"EDGE "<<i+1<<endl;
cout<<"enter source";
cin>>src;
cout<<"Enter destination";
cin>>des;
cout<<"Enter weight";
cin>>weight;
adj[src-1][des-1]=weight;
adj[des-1][src-1]=weight;
}
cout<<endl;
}
void display(int v){
for(int i=0;i<v;i++){
for(int j=0;j<v;j++){
cout<<adj[i][j]<<" ";
}
cout<<endl;
}
}
void dijkstra(int src){
bool visited[max_node];
for(int i=0;i<vertex;i++){
visited[i]=false;
distance[i]=INT_MAX;
}
path[src]=-1;
distance[src]=0;
for(int i=0;i<vertex-1;i++){
int u=mindistance(visited);
visited[u]=true;
for(int v=0;v<vertex;v++){
if(visited[v]==false&&distance[u]!=INT_MAX&&adj[u][v]&&distance[u]+adj[u][v]<distance[v]){
path[v]=u;
distance[v]=distance[u]+adj[u][v];
}
}
}
cout<<"dest \tdistance \tsortest path";
cout<<endl;
for(int i=0;i<vertex;i++){
cout<<"\n"<<i+1<<"\t\t"<<distance[i]<<"\t\t"<<src+1;
shortest(i);
}
}
int mindistance(bool  *visited){
int min=INT_MAX, min_index;
for(int i=0;i<vertex;i++){
if(distance[i]<=min&&visited[i]==false){
min_index=i;
min=distance[i];
}
}
return min_index;
}
void shortest(int node){
if(path[node]==-1)
return ;
shortest(path[node]);
cout<<"->"<<node+1;
}};
int main(){
int v,e,src;
graph g;
cout<<"enter vertex";
cin>>v;
cout<<endl;
cout<<"enter edges";
cin>>e;
g.input(e,v);
cout<<"graph";
cout<<endl;
g.display(v);
cout<<"enter source ";
cin>>src;
cout<<endl;
g.dijkstra(src);
return 0;
}
